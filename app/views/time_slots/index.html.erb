<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- ヘッダー -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900 mb-2">
            📅 面談枠設定
          </h1>
          <p class="text-gray-600">
            <span class="font-semibold text-green-600"><%= @current_teacher.name %></span>の面談可能時間を設定してください
          </p>
        </div>

        <!-- 校舎選択 -->
        <div class="mt-4 sm:mt-0">
          <%= form_with url: time_slots_path, method: :get, local: true, class: "flex items-center space-x-3" do |form| %>
          <%= form.hidden_field :week_start, value: @start_date %>
          <label class="text-sm font-medium text-gray-700">校舎:</label>
          <%= form.select :campus_id, 
                options_from_collection_for_select(@campuses, :id, :name, @selected_campus&.id),
                { prompt: "校舎を選択" },
                { 
                  class: "rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500",
                  onchange: "this.form.submit();"
                } %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- 週ナビゲーション -->
    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
      <div class="flex items-center justify-between">
        <!-- 前の週 -->
        <%= link_to time_slots_path(week_start: (@start_date - 1.week), campus_id: @selected_campus&.id), 
            class: "flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors" do %>
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        前の週
        <% end %>

        <!-- 現在の週 -->
        <div class="text-center">
          <h2 class="text-lg font-semibold text-gray-900">
            <%= @start_date.strftime('%Y年%m月%d日') %> 〜 <%= (@start_date + 6.days).strftime('%m月%d日') %>
          </h2>
          <p class="text-sm text-gray-500 mt-1">
            <%= @start_date.strftime('%Y年第%U週') %>
          </p>
        </div>

        <!-- 次の週 -->
        <%= link_to time_slots_path(week_start: (@start_date + 1.week), campus_id: @selected_campus&.id), 
            class: "flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors" do %>
        次の週
        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
        <% end %>
      </div>

      <!-- 今週・来週・再来週ボタン -->
      <div class="flex justify-center space-x-2 mt-4">
        <%= link_to "今週", time_slots_path(week_start: Date.current.beginning_of_week(:monday), campus_id: @selected_campus&.id),
            class: "px-3 py-1 text-xs font-medium rounded-full #{'bg-green-100 text-green-800' if @start_date == Date.current.beginning_of_week(:monday)} #{'bg-gray-100 text-gray-600 hover:bg-gray-200' unless @start_date == Date.current.beginning_of_week(:monday)} transition-colors" %>
        <%= link_to "来週", time_slots_path(week_start: (Date.current + 1.week).beginning_of_week(:monday), campus_id: @selected_campus&.id),
            class: "px-3 py-1 text-xs font-medium rounded-full #{'bg-green-100 text-green-800' if @start_date == (Date.current + 1.week).beginning_of_week(:monday)} #{'bg-gray-100 text-gray-600 hover:bg-gray-200' unless @start_date == (Date.current + 1.week).beginning_of_week(:monday)} transition-colors" %>
        <%= link_to "再来週", time_slots_path(week_start: (Date.current + 2.weeks).beginning_of_week(:monday), campus_id: @selected_campus&.id),
            class: "px-3 py-1 text-xs font-medium rounded-full #{'bg-green-100 text-green-800' if @start_date == (Date.current + 2.weeks).beginning_of_week(:monday)} #{'bg-gray-100 text-gray-600 hover:bg-gray-200' unless @start_date == (Date.current + 2.weeks).beginning_of_week(:monday)} transition-colors" %>
      </div>
    </div>

    <!-- 面談枠グリッド -->
    <div class="bg-white rounded-lg shadow-sm">
      <div id="time-slots-grid">
        <%= render 'time_slots_grid' %>
      </div>
    </div>

    <!-- 凡例 -->
    <div class="bg-white rounded-lg shadow-sm p-4 mt-6">
      <h3 class="text-sm font-medium text-gray-900 mb-3">凡例</h3>
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm">
        <div class="flex items-center">
          <div class="w-4 h-4 bg-gray-100 border border-gray-300 rounded mr-2"></div>
          <span class="text-gray-600">未設定</span>
        </div>
        <div class="flex items-center">
          <div class="w-4 h-4 bg-green-100 border border-green-300 rounded mr-2"></div>
          <span class="text-gray-600">予約可能</span>
        </div>
        <div class="flex items-center">
          <div class="w-4 h-4 bg-yellow-100 border border-yellow-300 rounded mr-2"></div>
          <span class="text-gray-600">予約済み</span>
        </div>
        <div class="flex items-center">
          <div class="w-4 h-4 bg-red-100 border border-red-300 rounded mr-2"></div>
          <span class="text-gray-600">利用不可</span>
        </div>
      </div>
    </div>

    <!-- 操作説明 -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-blue-800">操作方法</h3>
          <div class="mt-2 text-sm text-blue-700">
            <ul class="list-disc list-inside space-y-1">
              <li><strong>クリック</strong>: 時間枠をクリックして予約可能/未設定を切り替え</li>
              <li><strong>面談時間</strong>: 20分面談なら14:00と14:20、30分面談なら14:00と14:30を設定</li>
              <li><strong>予約済み</strong>: 黄色の枠は生徒が予約済みのため変更できません</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 通知メッセージ用 -->
<div id="notification" class="fixed top-4 right-4 z-50 hidden">
  <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 max-w-sm">
    <div class="flex items-center">
      <div id="notification-icon" class="flex-shrink-0 mr-3"></div>
      <div id="notification-message" class="text-sm font-medium text-gray-900"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // CSRF トークンを取得
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

    // 面談枠のクリックイベントを設定
    function setupTimeSlotClicks() {
      const clickableCells = document.querySelectorAll('[data-clickable="true"]');

      clickableCells.forEach(cell => {
        cell.addEventListener('click', function() {
          handleTimeSlotClick(this);
        });
      });
    }

    // 面談枠クリック処理
    function handleTimeSlotClick(cell) {
      const date = cell.dataset.date;
      const time = cell.dataset.time;
      const campusId = cell.dataset.campusId;
      const existingId = cell.dataset.existingId;
      const currentStatus = cell.dataset.currentStatus;

      // 校舎が選択されていない場合
      if (!campusId) {
        showNotification('error', '校舎を選択してください');
        return;
      }

      // ローディング状態を表示
      cell.style.opacity = '0.5';
      cell.style.pointerEvents = 'none';

      if (currentStatus === 'none') {
        // 新規作成
        createTimeSlot(date, time, campusId, cell);
      } else {
        // 既存の削除
        deleteTimeSlot(existingId, cell);
      }
    }

    // 面談枠作成
    function createTimeSlot(date, time, campusId, cell) {
      const formData = new FormData();
      formData.append('time_slot[date]', date);
      formData.append('time_slot[start_time]', time);
      formData.append('time_slot[campus_id]', campusId);
      formData.append('time_slot[status]', 'available');

      fetch('/time_slots', {
          method: 'POST',
          headers: {
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json'
          },
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            // セルの見た目を更新
            updateCellAppearance(cell, 'available', data.slot.id);
            showNotification('success', data.message);
          } else {
            showNotification('error', data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showNotification('error', '通信エラーが発生しました');
        })
        .finally(() => {
          // ローディング状態を解除
          cell.style.opacity = '1';
          cell.style.pointerEvents = 'auto';
        });
    }

    // 面談枠削除
    function deleteTimeSlot(slotId, cell) {
      fetch(`/time_slots/${slotId}`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            // セルの見た目を更新
            updateCellAppearance(cell, 'none', null);
            showNotification('success', data.message);
          } else {
            showNotification('error', data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showNotification('error', '通信エラーが発生しました');
        })
        .finally(() => {
          // ローディング状態を解除
          cell.style.opacity = '1';
          cell.style.pointerEvents = 'auto';
        });
    }

    // セルの見た目を更新
    function updateCellAppearance(cell, status, slotId) {
      // 既存のクラスを削除
      cell.className = cell.className.replace(/bg-\w+-\d+/g, '').replace(/border-\w+-\d+/g, '').replace(/hover:bg-\w+-\d+/g, '');

      // ステータスシンボル要素を取得（新しい構造に対応）
      const statusSymbolEl = cell.querySelector('div:last-child');

      if (status === 'available') {
        cell.className += ' bg-green-100 border-green-300 hover:bg-green-200';
        if (statusSymbolEl) {
          statusSymbolEl.textContent = '○';
        }
        cell.title = '予約可能（クリックで解除）';
        cell.dataset.existingId = slotId;
        cell.dataset.currentStatus = 'available';
      } else if (status === 'none') {
        cell.className += ' bg-gray-50 border-gray-300 hover:bg-green-100';
        if (statusSymbolEl) {
          statusSymbolEl.textContent = '';
        }
        cell.title = '未設定（クリックで予約可能に設定）';
        cell.dataset.existingId = '';
        cell.dataset.currentStatus = 'none';
      }
    }

    // 通知メッセージを表示
    function showNotification(type, message) {
      const notification = document.getElementById('notification');
      const icon = document.getElementById('notification-icon');
      const messageEl = document.getElementById('notification-message');

      // アイコンを設定
      if (type === 'success') {
        icon.innerHTML = '<svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>';
      } else {
        icon.innerHTML = '<svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>';
      }

      messageEl.textContent = message;
      notification.classList.remove('hidden');

      // 3秒後に自動で非表示
      setTimeout(() => {
        notification.classList.add('hidden');
      }, 3000);
    }

    // 初期化
    setupTimeSlotClicks();
  });
</script>