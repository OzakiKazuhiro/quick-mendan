---
description: Matchプロジェクトの要件定義
globs: 
alwaysApply: true
---
# **サービス名「quick-mendan」**

## **サービス概要**

職場の生徒との個人面談の予定・予約管理を行うWebアプリケーション。
講師が面談可能な時間枠を設定し、生徒が自由に予約を取ることができる。
シンプルで使いやすい面談予約システムを提供する。

## **基本情報**

### **利用者**
- **講師**: 20名程度（増加可能性あり）
- **生徒**: 最大500名程度
- **校舎**: 4校舎（三国ヶ丘本部校・泉ヶ丘駅前校・岸和田校・鳳駅前校）

### **面談設定**
- **時間枠**: 10分刻み（例：13:00, 13:10, 13:20, 13:30...）
- **面談可能時間**: 平日14:00-22:00（設定で変更可能）
- **面談時間**: 講師によって異なる（20分または30分が多い）
- **予約制限**: 前日22:15まで予約・変更・キャンセル可能

## **機能要件**

### **生徒向け機能**
- **認証**: 生徒番号 + パスワード9999（統一）でログイン
- **予約**: 講師が設定した面談可能枠から予約を取る
- **予約確認**: 自分の予約一覧を確認
- **予約変更**: 前日22:15まで予約の変更が可能
- **予約キャンセル**: 前日22:15まで予約のキャンセルが可能

### **講師向け機能**
- **認証**: メールアドレス + パスワードでログイン
- **面談枠設定**: 10分刻みの時間枠で面談可能時間を設定
- **予約管理**: 自分の面談予約一覧を確認・管理
- **代理予約**: 生徒の代わりに予約を設定（当日でも可能）
- **全体予約確認**: 全講師の予約状況を確認
- **校舎別表示**: チェックボックスで校舎を絞り込んで表示
- **面談記録**: 面談後にメモを残す機能
- **生徒情報管理**: CSVファイルで生徒情報を一括読み込み
- **メールリマインダー**: 任意でメールアドレスを登録し、翌日の面談予定を通知

### **管理機能**
- **時間設定**: 面談可能時間帯の設定（デフォルト：14:00-22:00）
- **校舎管理**: 校舎情報の管理
- **生徒データ**: CSV形式での生徒情報インポート（生徒番号・氏名・校舎など）

### **認証システム**
- **管理者**: ユーザー名 + パスワードでログイン（マスター権限）
- **講師**: ユーザー名 + パスワードでログイン（管理者が作成）
- **生徒**: 生徒番号 + パスワード9999（統一）でログイン

### **権限管理**
- **管理者権限**: 講師アカウントの作成・削除・管理
- **講師権限**: 自分が担当する校舎の面談枠設定・予約管理
- **生徒権限**: 予約の取得・変更・キャンセル

## **利用フロー**

### **講師の利用フロー**
1. 講師がログイン
2. 管理画面で面談可能な時間枠を設定（10分刻み）
3. 生徒からの予約を確認
4. 面談実施
5. 面談記録をシステムに入力

### **生徒の利用フロー**
1. 生徒番号とパスワード9999でログイン
2. 講師一覧から面談したい講師を選択
3. 空いている時間枠から予約を取る
4. 予約確認画面で詳細を確認
5. 必要に応じて前日22:15まで変更・キャンセル

## **画面構成**

### **共通画面**
- ログイン画面
- トップページ（サービス概要）

### **生徒向け画面**
- 生徒用ダッシュボード
- 講師一覧画面
- 予約画面（カレンダー形式）
- 予約確認・変更画面
- 予約一覧画面

### **講師向け画面**
- 講師用ダッシュボード
- 面談枠設定画面（カレンダー形式）
- 予約管理画面
- 全体予約確認画面（校舎別フィルタ機能付き）
- 面談記録画面
- 生徒情報管理画面
- 設定画面（メール通知設定等）

### **管理者画面**
- システム設定画面
- 校舎管理画面
- 生徒情報一括インポート画面
- 利用統計画面

### **面談枠設定**
- **校舎ごと**: 講師は校舎ごとに面談枠を設定
- **表形式UI**: 時間軸×日付の表でクリック操作
- **色分け**: 青色=予約可能、黄色=予約済み、グレー=設定なし
- **一括更新**: 「更新」ボタンで設定を一括反映

## **データ構造**

### **主要エンティティ**
- **講師（Teachers）**: 認証情報、所属校舎、メール設定等
- **生徒（Students）**: 生徒番号、氏名、所属校舎等
- **校舎（Campuses）**: 校舎名、設定情報等
- **面談枠（TimeSlots）**: 講師、日時、予約状況等
- **予約（Appointments）**: 生徒、講師、面談枠、ステータス等
- **面談記録（InterviewRecords）**: 予約、記録内容、作成日時等

## **非機能要件**

### **セキュリティ**
- 生徒の個人情報保護
- 講師認証の強化
- セッション管理

### **パフォーマンス**
- 最大500名の生徒データ処理
- 20名の講師による同時アクセス対応
- レスポンシブデザイン対応

### **運用**
- ログ機能
- バックアップ機能
- エラーハンドリング

## **技術要件**

### **バックエンド**
- **フレームワーク**: Ruby on Rails 8.0.2
- **データベース**: 
  - **開発環境**: SQLite3
  - **本番環境**: Neon PostgreSQL（無料プラン・永続的）
- **認証**: Devise
- **テストフレームワーク**: RSpec

### **フロントエンド**
- **CSSフレームワーク**: TailwindCSS
- **JavaScript**: Stimulus（Rails標準）
- **モジュール管理**: Importmap

### **開発環境**
- **コンテナ**: 使用しない
- **ローカルDB**: SQLite3
- **デプロイ**: Render.com（Web Service無料プラン）
- **本番DB**: Neon PostgreSQL（無料プラン・永続的）
- **コード品質**: RuboCop、Brakeman

## **開発方針**

### **設計原則**
- シンプルで直感的なUI/UX
- 保守性の高いコード
- テスト駆動開発（TDD）
- セキュリティファースト

### **開発フェーズ**
1. **Phase 1**: 基本認証、面談枠設定、予約機能
2. **Phase 2**: 面談記録、通知機能
3. **Phase 3**: 管理機能、統計機能
4. **Phase 4**: 運用改善、機能拡張

## **将来の拡張予定**
- モバイルアプリ対応
- 校舎間連携機能
- 詳細な統計・分析機能
- 外部システム連携（学校管理システム等） 